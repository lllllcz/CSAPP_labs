#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
## 520021911275 李忱泽
## In this file, I change the order of some instructions and use the instruction IADDQ.
## Then, I try to use 4*1 loop unrolling.

#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# Loop header
	xorq %rax,%rax		# count = 0;
    rrmovq %rdx, %rcx
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:
Loop:
    iaddq $-4, %rcx
    jle SingleLoop

    mrmovq (%rdi), %r10
    mrmovq 8(%rdi), %r11
    mrmovq 16(%rdi), %r8
    mrmovq 24(%rdi), %r9
    iaddq $32, %rdi
    rmmovq %r10, (%rsi)
    rmmovq %r11, 8(%rsi)
    rmmovq %r8, 16(%rsi)
    rmmovq %r9, 24(%rsi)
    iaddq $32, %rsi

    andq %r10, %r10
    jle Npos1
    iaddq $1, %rax
Npos1:
    andq %r11, %r11
    jle Npos2
    iaddq $1, %rax
Npos2:
    andq %r8, %r8
    jle Npos3
    iaddq $1, %rax
Npos3:
    andq %r9, %r9
    jle Npos4
    iaddq $1, %rax
Npos4:
    iaddq $-4, %rdx
    jg Loop
	ret

SingleLoop:
	mrmovq (%rdi), %r10
	iaddq $-1, %rdx
	jle last
	iaddq $8, %rdi
	rmmovq %r10, (%rsi)
	andq %r10, %r10
	jle Npos
	iaddq $1, %rax
Npos:
	iaddq $8, %rsi
	jg SingleLoop
	ret

last:
	rmmovq %r10, (%rsi)
	andq %r10, %r10
	jle Done
	iaddq $1, %rax
	ret
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad 3
	.quad -4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
